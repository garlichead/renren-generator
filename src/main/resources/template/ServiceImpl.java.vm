package ${package}.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

import ${package}.dao.${className}Dao;
import ${package}.entity.${className}Entity;
import ${package}.service.${className}Service;


/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 * @version 1.0
 */
@Service("${classname}Service")
public class ${className}ServiceImpl implements ${className}Service {

	@Autowired
	private ${className}Dao ${classname}Dao;

	@Override
	public List<${className}DTO> findPage(${className}Query query) {
		Integer page = query.getPage();
		Integer size = query.getSize();
		if (null == page) {
			page = 1;
		}
		if (null == size) {
			size = 20;
		}
		PageHelper.startPage(page, size);
		List<${className}DO> ${classname}List = ${classname}Dao.findAll(query);
		return ObjectCloneUtils.convertList(${classname}List, ${className}DTO.class, CloneDirection.OPPOSITE);
	}

	@Override
	public List<${className}DTO> findAll(${className}Query query) {
		List<${className}DO> list = ${classname}Dao.findAll(query);
		return ObjectCloneUtils.convertList(list, ${className}DTO.class, CloneDirection.OPPOSITE)
	}

	@Override
	public ${className}DTO getById(Long id) {
		if (null == id) {
			log.info("id为空");
			return null;
		}
		${className}DO itemFinanceDO = ${classname}Dao.getById(id);
		log.info("${className}DO 详情: {}", itemFinanceDO);
		if (null != itemFinanceDO) {
			return itemFinanceDO.clone(${className}DTO.class, CloneDirection.FORWARD);
		}
		return null;
	}

	@Override
	public Boolean update(Long id, ${className}DTO dto) {
		if (null == id) {
			log.info("id为空");
			return false;
		}
		if (null == dto) {
			log.info("入参dto为空");
			return false;
		}
		dto.setId(id);
		${className}DO itemFinanceDO = dto.clone(${className}DO.class, CloneDirection.FORWARD);
		return ${classname}Dao.updateById(itemFinanceDO);
	}

	@Override
	public Boolean updateBatch(List<${className}DTO> list) {
		if (CollectionUtil.isEmpty(list)) {
			log.info("${className}DTO批量修改数据为空");
			return false;
		}
		List<${className}DO> itemFinanceDOList = ObjectCloneUtils.convertList(list, ${className}DTO.class, CloneDirection.FORWARD);
		return ${classname}Dao.updateBatchById(itemFinanceDOList);
	}

	@Override
	public Long save(${className}DTO dto) {
		if (null == dto) {
			log.info("新增${className}DTO数据为空");
			return 0L;
		}
		${className}DO itemFinanceDO = dto.clone(${className}DTO.class, CloneDirection.FORWARD);
		${classname}Dao.save(itemFinanceDO);
		return itemFinanceDO.getId();
	}

	@Override
	public List<Long> saveBatch(List<${className}DTO> list) {
		if (CollectionUtil.isEmpty(list)) {
		log.info("${className}DTO批量新增数据为空");
		return Collections.EMPTY_LIST;
		}
		List<${className}DO> itemFinanceDOList = ObjectCloneUtils.convertList(list, ${className}DO.class, CloneDirection.FORWARD);
		${classname}Dao.saveBatch(itemFinanceDOList);
		return itemFinanceDOList.stream().map(${classname}DO::getId).collect(Collectors.toList());
	}

	@Override
	public Boolean removeById(Long id) {
		return ${className}Dao.removeById(id);
	}

	@Override
	public Boolean removeByIdList(List<Long> idList) {
		return ${classname}Dao.removeByIds(idList);
	}
}
